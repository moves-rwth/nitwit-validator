<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation">
  <default>false</default>
 </key>
 <key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
  <default>false</default>
 </key>
 <key attr.name="isSinkNode" attr.type="boolean" for="node" id="sink">
  <default>false</default>
 </key>
 <key attr.name="enterLoopHead" attr.type="boolean" for="edge" id="enterLoopHead">
  <default>false</default>
 </key>
 <key attr.name="violatedProperty" attr.type="string" for="node" id="violatedProperty"/>
 <key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
 <key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
 <key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
 <key attr.name="specification" attr.type="string" for="graph" id="specification"/>
 <key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
 <key attr.name="producer" attr.type="string" for="graph" id="producer"/>
 <key attr.name="creationTime" attr.type="string" for="graph" id="creationtime"/>
 <key attr.name="startline" attr.type="int" for="edge" id="startline"/>
 <key attr.name="endline" attr.type="int" for="edge" id="endline"/>
 <key attr.name="originFileName" attr.type="string" for="edge" id="originfile">
  <default>doc/examples/bracket_error.c</default>
 </key>
 <key attr.name="control" attr.type="string" for="edge" id="control"/>
 <key attr.name="assumption" attr.type="string" for="edge" id="assumption"/>
 <key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/>
 <key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
 <key attr.name="returnFromFunction" attr.type="string" for="edge" id="returnFrom"/>
 <key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
 <key attr.name="inputWitnessHash" attr.type="string" for="graph" id="inputwitnesshash"/>
 <graph edgedefault="directed">
  <data key="witness-type">violation_witness</data>
  <data key="sourcecodelang">C</data>
  <data key="producer">CPAchecker 1.9 / default</data>
  <data key="specification">// This automaton contains the specification of the
// Competition on Software Verification.
// It checks only for calls to the __VERIFIER_error() functions
// and also implements some functions which usually lead to a program abort.
CONTROL AUTOMATON SVCOMP

INITIAL STATE Init;

STATE USEFIRST Init :
  MATCH {__VERIFIER_error($?)} -&gt; ERROR("unreach-call: $rawstatement called in $location");
  MATCH {__assert_fail($?)} || MATCH {abort($?)} || MATCH {exit($?)} -&gt; STOP;

END AUTOMATON</data>
  <data key="programfile">doc/examples/bracket_error.c</data>
  <data key="programhash">53dad6480b4d2123a5f90481b8e31a63ade5f72a4fcebe851b7713a04a54647b</data>
  <data key="architecture">32bit</data>
  <data key="creationtime">2020-12-29T11:00:32+01:00</data>
  <node id="A0">
   <data key="entry">true</data>
  </node>
  <node id="A586"/>
  <edge source="A0" target="A586">
   <data key="startline">656</data>
   <data key="endline">656</data>
   <data key="enterFunction">main</data>
  </edge>
  <node id="A587"/>
  <edge source="A586" target="A587">
   <data key="startline">658</data>
   <data key="endline">658</data>
   <data key="enterFunction">foo</data>
  </edge>
  <node id="A615"/>
  <edge source="A587" target="A615">
   <data key="startline">652</data>
   <data key="endline">652</data>
   <data key="assumption">j == (1);</data>
   <data key="assumption.scope">foo</data>
  </edge>
  <node id="A619"/>
  <edge source="A615" target="A619">
   <data key="startline">653</data>
   <data key="endline">653</data>
   <data key="enterFunction">ldv_set_add</data>
  </edge>
  <node id="A622"/>
  <edge source="A619" target="A622">
   <data key="startline">620</data>
   <data key="endline">620</data>
   <data key="assumption">new == (1);</data>
   <data key="assumption.scope">ldv_set_add</data>
   <data key="enterFunction">ldv_is_in_set</data>
  </edge>
  <node id="A625"/>
  <edge source="A622" target="A625">
   <data key="startline">638</data>
   <data key="endline">638</data>
   <data key="assumption">e == (1);</data>
   <data key="assumption.scope">ldv_is_in_set</data>
  </edge>
  <node id="A649"/>
  <edge source="A625" target="A649">
   <data key="enterLoopHead">true</data>
   <data key="startline">639</data>
   <data key="endline">639</data>
  </edge>
  <node id="sink">
   <data key="sink">true</data>
  </node>
  <edge source="A649" target="sink">
   <data key="startline">639</data>
   <data key="endline">639</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="A664"/>
  <edge source="A649" target="A664">
   <data key="startline">639</data>
   <data key="endline">639</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A729"/>
  <edge source="A664" target="A729">
   <data key="startline">644</data>
   <data key="endline">644</data>
   <data key="returnFrom">ldv_is_in_set</data>
  </edge>
  <node id="A733"/>
  <edge source="A729" target="A733">
   <data key="startline">620</data>
   <data key="endline">620</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A729" target="sink">
   <data key="startline">620</data>
   <data key="endline">620</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A738"/>
  <edge source="A733" target="A738">
   <data key="startline">622</data>
   <data key="endline">622</data>
   <data key="enterFunction">ldv_successful_malloc</data>
  </edge>
  <node id="A743"/>
  <edge source="A738" target="A743">
   <data key="startline">563</data>
   <data key="endline">563</data>
   <data key="assumption">size == (12U);</data>
   <data key="assumption.scope">ldv_successful_malloc</data>
  </edge>
  <node id="A749"/>
  <edge source="A743" target="A749">
   <data key="startline">565</data>
   <data key="endline">565</data>
   <data key="returnFrom">ldv_successful_malloc</data>
  </edge>
  <node id="A756"/>
  <edge source="A749" target="A756">
   <data key="startline">623</data>
   <data key="endline">623</data>
   <data key="assumption">(le-&gt;e) == (1);</data>
   <data key="assumption.scope">ldv_set_add</data>
  </edge>
  <node id="A760"/>
  <edge source="A756" target="A760">
   <data key="startline">624</data>
   <data key="endline">624</data>
   <data key="enterFunction">ldv_list_add</data>
  </edge>
  <node id="A763"/>
  <edge source="A760" target="A763">
   <data key="startline">592</data>
   <data key="endline">592</data>
   <data key="enterFunction">__ldv_list_add</data>
  </edge>
  <node id="A770"/>
  <edge source="A763" target="A770">
   <data key="startline">592</data>
   <data key="endline">592</data>
   <data key="returnFrom">__ldv_list_add</data>
  </edge>
  <node id="A772"/>
  <edge source="A770" target="A772">
   <data key="startline">624</data>
   <data key="endline">624</data>
   <data key="returnFrom">ldv_list_add</data>
  </edge>
  <node id="A776"/>
  <edge source="A772" target="A776">
   <data key="startline">653</data>
   <data key="endline">653</data>
   <data key="returnFrom">ldv_set_add</data>
  </edge>
  <node id="A778"/>
  <edge source="A776" target="A778">
   <data key="startline">654</data>
   <data key="endline">654</data>
   <data key="enterFunction">ldv_is_in_set</data>
  </edge>
  <node id="A780"/>
  <edge source="A778" target="A780">
   <data key="startline">638</data>
   <data key="endline">638</data>
   <data key="assumption">e == (1);</data>
   <data key="assumption.scope">ldv_is_in_set</data>
  </edge>
  <node id="A4403"/>
  <edge source="A780" target="A4403">
   <data key="enterLoopHead">true</data>
   <data key="startline">639</data>
   <data key="endline">639</data>
   <data key="assumption">(m-&gt;e) == (1);</data>
   <data key="assumption.scope">ldv_is_in_set</data>
  </edge>
  <node id="A4411"/>
  <edge source="A4403" target="A4411">
   <data key="startline">639</data>
   <data key="endline">639</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A4403" target="sink">
   <data key="startline">639</data>
   <data key="endline">639</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A4418"/>
  <edge source="A4411" target="A4418">
   <data key="startline">640</data>
   <data key="endline">640</data>
   <data key="control">condition-true</data>
   <data key="assumption">(m-&gt;e) == (1); e == (1);</data>
   <data key="assumption.scope">ldv_is_in_set</data>
  </edge>
  <edge source="A4411" target="sink">
   <data key="startline">640</data>
   <data key="endline">640</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A4600"/>
  <edge source="A4418" target="A4600">
   <data key="startline">641</data>
   <data key="endline">641</data>
   <data key="returnFrom">ldv_is_in_set</data>
  </edge>
  <edge source="A4600" target="sink">
   <data key="startline">654</data>
   <data key="endline">654</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A4770">
   <data key="violation">true</data>
   <data key="violatedProperty">unreach-call: __VERIFIER_error(); called in line 654</data>
  </node>
  <edge source="A4600" target="A4770">
   <data key="startline">654</data>
   <data key="endline">654</data>
   <data key="control">condition-true</data>
  </edge>
 </graph>
</graphml>
