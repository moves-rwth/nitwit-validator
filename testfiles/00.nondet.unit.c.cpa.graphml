<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation">
  <default>false</default>
 </key>
 <key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
  <default>false</default>
 </key>
 <key attr.name="isSinkNode" attr.type="boolean" for="node" id="sink">
  <default>false</default>
 </key>
 <key attr.name="enterLoopHead" attr.type="boolean" for="edge" id="enterLoopHead">
  <default>false</default>
 </key>
 <key attr.name="violatedProperty" attr.type="string" for="node" id="violatedProperty"/>
 <key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
 <key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
 <key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
 <key attr.name="specification" attr.type="string" for="graph" id="specification"/>
 <key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
 <key attr.name="producer" attr.type="string" for="graph" id="producer"/>
 <key attr.name="creationTime" attr.type="string" for="graph" id="creationtime"/>
 <key attr.name="startline" attr.type="int" for="edge" id="startline"/>
 <key attr.name="endline" attr.type="int" for="edge" id="endline"/>
 <key attr.name="originFileName" attr.type="string" for="edge" id="originfile">
  <default>doc/examples/00.nondet.unit.c</default>
 </key>
 <key attr.name="control" attr.type="string" for="edge" id="control"/>
 <key attr.name="assumption" attr.type="string" for="edge" id="assumption"/>
 <key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/>
 <key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
 <key attr.name="returnFromFunction" attr.type="string" for="edge" id="returnFrom"/>
 <key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
 <key attr.name="inputWitnessHash" attr.type="string" for="graph" id="inputwitnesshash"/>
 <graph edgedefault="directed">
  <data key="witness-type">violation_witness</data>
  <data key="sourcecodelang">C</data>
  <data key="producer">CPAchecker 1.9 / default</data>
  <data key="specification">// This automaton contains the specification of the
// Competition on Software Verification.
// It checks only for calls to the __VERIFIER_error() functions
// and also implements some functions which usually lead to a program abort.
CONTROL AUTOMATON SVCOMP

INITIAL STATE Init;

STATE USEFIRST Init :
  MATCH {__VERIFIER_error($?)} -&gt; ERROR("unreach-call: $rawstatement called in $location");
  MATCH {__assert_fail($?)} || MATCH {abort($?)} || MATCH {exit($?)} -&gt; STOP;

END AUTOMATON</data>
  <data key="programfile">doc/examples/00.nondet.unit.c</data>
  <data key="programhash">5032370e68cbbdda9a88d91971c4bb426cb9cea9aaeee056672d758590a3aa2a</data>
  <data key="architecture">32bit</data>
  <data key="creationtime">2020-08-01T14:33:47+02:00</data>
  <node id="A0">
   <data key="entry">true</data>
  </node>
  <node id="A8"/>
  <edge source="A0" target="A8">
   <data key="startline">13</data>
   <data key="endline">13</data>
   <data key="enterFunction">main</data>
  </edge>
  <node id="A59"/>
  <edge source="A8" target="A59">
   <data key="startline">14</data>
   <data key="endline">14</data>
   <data key="assumption">MAX == (2);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A67"/>
  <edge source="A59" target="A67">
   <data key="startline">15</data>
   <data key="endline">15</data>
   <data key="assumption">MAX == (2);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A114"/>
  <edge source="A67" target="A114">
   <data key="enterLoopHead">true</data>
   <data key="startline">20</data>
   <data key="endline">20</data>
   <data key="assumption">i == (0);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A122"/>
  <edge source="A114" target="A122">
   <data key="startline">20</data>
   <data key="endline">20</data>
   <data key="control">condition-true</data>
   <data key="assumption">i == (0); MAX == (2);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="sink">
   <data key="sink">true</data>
  </node>
  <edge source="A114" target="sink">
   <data key="startline">20</data>
   <data key="endline">20</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A221"/>
  <edge source="A122" target="A221">
   <data key="startline">21</data>
   <data key="endline">21</data>
   <data key="assumption">(str1[i]) == (-128);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A1820"/>
  <edge source="A221" target="A1820">
   <data key="enterLoopHead">true</data>
   <data key="startline">20</data>
   <data key="endline">20</data>
   <data key="assumption">i == (1);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A1822"/>
  <edge source="A1820" target="A1822">
   <data key="startline">20</data>
   <data key="endline">20</data>
   <data key="control">condition-true</data>
   <data key="assumption">i == (1); MAX == (2);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <edge source="A1820" target="sink">
   <data key="startline">20</data>
   <data key="endline">20</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A2027"/>
  <edge source="A1822" target="A2027">
   <data key="startline">21</data>
   <data key="endline">21</data>
   <data key="assumption">(str1[i]) == (0);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A3231"/>
  <edge source="A2027" target="A3231">
   <data key="enterLoopHead">true</data>
   <data key="startline">20</data>
   <data key="endline">20</data>
   <data key="assumption">i == (2);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <edge source="A3231" target="sink">
   <data key="startline">20</data>
   <data key="endline">20</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="A3233"/>
  <edge source="A3231" target="A3233">
   <data key="startline">20</data>
   <data key="endline">20</data>
   <data key="control">condition-false</data>
   <data key="assumption">i == (2); MAX == (2);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A3234"/>
  <edge source="A3233" target="A3234">
   <data key="startline">23</data>
   <data key="endline">23</data>
   <data key="assumption">(str1[MAX - (1)]) == (0);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A3235"/>
  <edge source="A3234" target="A3235">
   <data key="startline">25</data>
   <data key="endline">25</data>
   <data key="assumption">j == (0);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A3237"/>
  <edge source="A3235" target="A3237">
   <data key="enterLoopHead">true</data>
   <data key="startline">27</data>
   <data key="endline">27</data>
   <data key="assumption">i == (1);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A3242"/>
  <edge source="A3237" target="A3242">
   <data key="startline">27</data>
   <data key="endline">27</data>
   <data key="control">condition-true</data>
   <data key="assumption">i == (1);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <edge source="A3237" target="sink">
   <data key="startline">27</data>
   <data key="endline">27</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A3501"/>
  <edge source="A3242" target="A3501">
   <data key="startline">28</data>
   <data key="endline">28</data>
   <data key="assumption">(str2[j]) == (-128);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A3507"/>
  <edge source="A3501" target="A3507">
   <data key="startline">29</data>
   <data key="endline">29</data>
   <data key="assumption">j == (1);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A3518"/>
  <edge source="A3507" target="A3518">
   <data key="enterLoopHead">true</data>
   <data key="startline">27</data>
   <data key="endline">27</data>
   <data key="assumption">i == (0);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A3521"/>
  <edge source="A3518" target="A3521">
   <data key="startline">27</data>
   <data key="endline">27</data>
   <data key="control">condition-true</data>
   <data key="assumption">i == (0);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <edge source="A3518" target="sink">
   <data key="startline">27</data>
   <data key="endline">27</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A3582"/>
  <edge source="A3521" target="A3582">
   <data key="startline">28</data>
   <data key="endline">28</data>
   <data key="assumption">(str2[j]) == (-128);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A3584"/>
  <edge source="A3582" target="A3584">
   <data key="startline">29</data>
   <data key="endline">29</data>
   <data key="assumption">j == (2);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A3587"/>
  <edge source="A3584" target="A3587">
   <data key="enterLoopHead">true</data>
   <data key="startline">27</data>
   <data key="endline">27</data>
   <data key="assumption">i == (-1);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <edge source="A3587" target="sink">
   <data key="startline">27</data>
   <data key="endline">27</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="A3590"/>
  <edge source="A3587" target="A3590">
   <data key="startline">27</data>
   <data key="endline">27</data>
   <data key="control">condition-false</data>
   <data key="assumption">i == (-1);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A3591"/>
  <edge source="A3590" target="A3591">
   <data key="startline">32</data>
   <data key="endline">32</data>
   <data key="assumption">j == (1);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A3593"/>
  <edge source="A3591" target="A3593">
   <data key="enterLoopHead">true</data>
   <data key="startline">33</data>
   <data key="endline">33</data>
   <data key="assumption">i == (0);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A3594"/>
  <edge source="A3593" target="A3594">
   <data key="startline">33</data>
   <data key="endline">33</data>
   <data key="control">condition-true</data>
   <data key="assumption">i == (0); MAX == (2);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <edge source="A3593" target="sink">
   <data key="startline">33</data>
   <data key="endline">33</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A3598"/>
  <edge source="A3594" target="A3598">
   <data key="startline">34</data>
   <data key="endline">34</data>
   <data key="enterFunction">__VERIFIER_assert</data>
  </edge>
  <edge source="A3598" target="sink">
   <data key="startline">5</data>
   <data key="endline">5</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="A3601"/>
  <edge source="A3598" target="A3601">
   <data key="startline">5</data>
   <data key="endline">5</data>
   <data key="control">condition-false</data>
   <data key="assumption">cond == (1);</data>
   <data key="assumption.scope">__VERIFIER_assert</data>
  </edge>
  <node id="A3607"/>
  <edge source="A3601" target="A3607">
   <data key="startline">8</data>
   <data key="endline">8</data>
   <data key="returnFrom">__VERIFIER_assert</data>
  </edge>
  <node id="A3610"/>
  <edge source="A3607" target="A3610">
   <data key="startline">35</data>
   <data key="endline">35</data>
   <data key="assumption">j == (0);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A3613"/>
  <edge source="A3610" target="A3613">
   <data key="enterLoopHead">true</data>
   <data key="startline">33</data>
   <data key="endline">33</data>
   <data key="assumption">i == (1);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A3614"/>
  <edge source="A3613" target="A3614">
   <data key="startline">33</data>
   <data key="endline">33</data>
   <data key="control">condition-true</data>
   <data key="assumption">i == (1); MAX == (2);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <edge source="A3613" target="sink">
   <data key="startline">33</data>
   <data key="endline">33</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A3617"/>
  <edge source="A3614" target="A3617">
   <data key="startline">34</data>
   <data key="endline">34</data>
   <data key="enterFunction">__VERIFIER_assert</data>
  </edge>
  <node id="A3619">
   <data key="violation">true</data>
   <data key="violatedProperty">unreach-call: __VERIFIER_error(); called in line 6</data>
  </node>
  <edge source="A3617" target="A3619">
   <data key="startline">5</data>
   <data key="endline">5</data>
   <data key="control">condition-true</data>
   <data key="assumption">cond == (0);</data>
   <data key="assumption.scope">__VERIFIER_assert</data>
  </edge>
  <edge source="A3617" target="sink">
   <data key="startline">5</data>
   <data key="endline">5</data>
   <data key="control">condition-false</data>
  </edge>
 </graph>
</graphml>
