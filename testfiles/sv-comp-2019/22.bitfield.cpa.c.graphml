<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation">
  <default>false</default>
 </key>
 <key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
  <default>false</default>
 </key>
 <key attr.name="isSinkNode" attr.type="boolean" for="node" id="sink">
  <default>false</default>
 </key>
 <key attr.name="violatedProperty" attr.type="string" for="node" id="violatedProperty"/>
 <key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
 <key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
 <key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
 <key attr.name="specification" attr.type="string" for="graph" id="specification"/>
 <key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
 <key attr.name="producer" attr.type="string" for="graph" id="producer"/>
 <key attr.name="creationTime" attr.type="string" for="graph" id="creationtime"/>
 <key attr.name="startline" attr.type="int" for="edge" id="startline"/>
 <key attr.name="endline" attr.type="int" for="edge" id="endline"/>
 <key attr.name="startoffset" attr.type="int" for="edge" id="startoffset"/>
 <key attr.name="endoffset" attr.type="int" for="edge" id="endoffset"/>
 <key attr.name="originFileName" attr.type="string" for="edge" id="originfile">
  <default>./22.bitfield.c</default>
 </key>
 <key attr.name="control" attr.type="string" for="edge" id="control"/>
 <key attr.name="assumption" attr.type="string" for="edge" id="assumption"/>
 <key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/>
 <key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
 <key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
 <key attr.name="inputWitnessHash" attr.type="string" for="graph" id="inputwitnesshash"/>
 <graph edgedefault="directed">
  <data key="witness-type">violation_witness</data>
  <data key="sourcecodelang">C</data>
  <data key="producer">CPAchecker 1.8-svn a776d662f5+ / kInduction</data>
  <data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data>
  <data key="programfile">./22.bitfield.c</data>
  <data key="programhash">d85ef6692ac9184516e222790c7443027d78064bfb7ecea45a81e8038b241803</data>
  <data key="architecture">32bit</data>
  <data key="creationtime">2019-09-02T15:21:19+02:00</data>
  <node id="A23">
   <data key="entry">true</data>
  </node>
  <node id="A52"/>
  <edge source="A23" target="A52">
   <data key="startline">13</data>
   <data key="endline">13</data>
   <data key="startoffset">462</data>
   <data key="endoffset">472</data>
   <data key="enterFunction">main</data>
  </edge>
  <node id="A77"/>
  <edge source="A52" target="A77">
   <data key="startline">15</data>
   <data key="endline">15</data>
   <data key="startoffset">486</data>
   <data key="endoffset">510</data>
   <data key="assumption">n == (9);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A85"/>
  <edge source="A77" target="A85">
   <data key="startline">18</data>
   <data key="endline">18</data>
   <data key="startoffset">552</data>
   <data key="endoffset">558</data>
   <data key="assumption">((signed int)(s.a)) == (1);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A86"/>
  <edge source="A85" target="A86">
   <data key="startline">19</data>
   <data key="endline">19</data>
   <data key="startoffset">565</data>
   <data key="endoffset">571</data>
   <data key="assumption">((signed int)(s.b)) == (1);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A87"/>
  <edge source="A86" target="A87">
   <data key="startline">20</data>
   <data key="endline">20</data>
   <data key="startoffset">578</data>
   <data key="endoffset">584</data>
   <data key="assumption">((signed int)(s.c)) == (1);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A91"/>
  <edge source="A87" target="A91">
   <data key="startline">21</data>
   <data key="endline">21</data>
   <data key="startoffset">591</data>
   <data key="endoffset">597</data>
   <data key="assumption">((signed int)(s.d)) == (9);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A92"/>
  <edge source="A91" target="A92">
   <data key="startline">22</data>
   <data key="endline">22</data>
   <data key="startoffset">604</data>
   <data key="endoffset">610</data>
   <data key="assumption">((signed int)(s.e)) == (9);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A125">
   <data key="violation">true</data>
   <data key="violatedProperty">__VERIFIER_error(); called in line 24</data>
  </node>
  <edge source="A92" target="A125">
   <data key="startline">23</data>
   <data key="endline">23</data>
   <data key="startoffset">671</data>
   <data key="endoffset">679</data>
   <data key="control">condition-true</data>
   <data key="assumption">((signed int)(s.e)) == (9);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="sink">
   <data key="sink">true</data>
  </node>
  <edge source="A92" target="sink">
   <data key="startline">23</data>
   <data key="endline">23</data>
   <data key="startoffset">621</data>
   <data key="endoffset">679</data>
   <data key="control">condition-false</data>
  </edge>
 </graph>
</graphml>
