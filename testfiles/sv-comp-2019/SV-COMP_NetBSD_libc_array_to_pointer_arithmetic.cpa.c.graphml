<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation">
  <default>false</default>
 </key>
 <key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
  <default>false</default>
 </key>
 <key attr.name="isSinkNode" attr.type="boolean" for="node" id="sink">
  <default>false</default>
 </key>
 <key attr.name="enterLoopHead" attr.type="boolean" for="edge" id="enterLoopHead">
  <default>false</default>
 </key>
 <key attr.name="violatedProperty" attr.type="string" for="node" id="violatedProperty"/>
 <key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
 <key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
 <key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
 <key attr.name="specification" attr.type="string" for="graph" id="specification"/>
 <key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
 <key attr.name="producer" attr.type="string" for="graph" id="producer"/>
 <key attr.name="creationTime" attr.type="string" for="graph" id="creationtime"/>
 <key attr.name="startline" attr.type="int" for="edge" id="startline"/>
 <key attr.name="endline" attr.type="int" for="edge" id="endline"/>
 <key attr.name="startoffset" attr.type="int" for="edge" id="startoffset"/>
 <key attr.name="endoffset" attr.type="int" for="edge" id="endoffset"/>
 <key attr.name="originFileName" attr.type="string" for="edge" id="originfile">
  <default>./SV-COMP_NetBSD_libc_array_to_pointer_arithmetic.c</default>
 </key>
 <key attr.name="control" attr.type="string" for="edge" id="control"/>
 <key attr.name="assumption" attr.type="string" for="edge" id="assumption"/>
 <key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/>
 <key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
 <key attr.name="returnFromFunction" attr.type="string" for="edge" id="returnFrom"/>
 <key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
 <key attr.name="inputWitnessHash" attr.type="string" for="graph" id="inputwitnesshash"/>
 <graph edgedefault="directed">
  <data key="witness-type">violation_witness</data>
  <data key="sourcecodelang">C</data>
  <data key="producer">CPAchecker 1.8-svn a776d662f5+ / kInduction</data>
  <data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data>
  <data key="programfile">./SV-COMP_NetBSD_libc_array_to_pointer_arithmetic.c</data>
  <data key="programhash">c334ead1326477729f39cb378a9a1b1a1771dd8f6629a8102a7af0dfe0aabc53</data>
  <data key="architecture">32bit</data>
  <data key="creationtime">2019-06-28T14:23:16+02:00</data>
  <node id="A155">
   <data key="entry">true</data>
  </node>
  <node id="A228"/>
  <edge source="A155" target="A228">
   <data key="startline">27</data>
   <data key="endline">27</data>
   <data key="startoffset">590</data>
   <data key="endoffset">600</data>
   <data key="enterFunction">main</data>
  </edge>
  <node id="A261"/>
  <edge source="A228" target="A261">
   <data key="startline">35</data>
   <data key="endline">35</data>
   <data key="startoffset">734</data>
   <data key="endoffset">754</data>
   <data key="enterFunction">glob2</data>
  </edge>
  <node id="A270"/>
  <edge source="A261" target="A270">
   <data key="enterLoopHead">true</data>
   <data key="startline">18</data>
   <data key="endline">18</data>
   <data key="startoffset">492</data>
   <data key="endoffset">502</data>
  </edge>
  <node id="A274"/>
  <edge source="A270" target="A274">
   <data key="startline">18</data>
   <data key="endline">18</data>
   <data key="startoffset">505</data>
   <data key="endoffset">516</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="sink">
   <data key="sink">true</data>
  </node>
  <edge source="A270" target="sink">
   <data key="startline">18</data>
   <data key="endline">18</data>
   <data key="startoffset">505</data>
   <data key="endoffset">516</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A278"/>
  <edge source="A274" target="A278">
   <data key="startline">20</data>
   <data key="endline">20</data>
   <data key="startoffset">531</data>
   <data key="endoffset">554</data>
   <data key="enterFunction">__VERIFIER_assert</data>
  </edge>
  <edge source="A278" target="sink">
   <data key="startline">4</data>
   <data key="endline">4</data>
   <data key="startoffset">342</data>
   <data key="endoffset">345</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="A281"/>
  <edge source="A278" target="A281">
   <data key="startline">4</data>
   <data key="endline">4</data>
   <data key="startoffset">342</data>
   <data key="endoffset">345</data>
   <data key="control">condition-false</data>
   <data key="assumption">cond == (1);</data>
   <data key="assumption.scope">__VERIFIER_assert</data>
  </edge>
  <node id="A311"/>
  <edge source="A281" target="A311">
   <data key="startline">7</data>
   <data key="endline">7</data>
   <data key="startoffset">388</data>
   <data key="endoffset">394</data>
   <data key="returnFrom">__VERIFIER_assert</data>
  </edge>
  <node id="A319"/>
  <edge source="A311" target="A319">
   <data key="startline">21</data>
   <data key="endline">21</data>
   <data key="startoffset">562</data>
   <data key="endoffset">567</data>
   <data key="assumption">(*(p)) == (1);</data>
   <data key="assumption.scope">glob2</data>
  </edge>
  <node id="A522"/>
  <edge source="A319" target="A522">
   <data key="enterLoopHead">true</data>
   <data key="startline">18</data>
   <data key="endline">18</data>
   <data key="startoffset">519</data>
   <data key="endoffset">521</data>
  </edge>
  <node id="A524"/>
  <edge source="A522" target="A524">
   <data key="startline">18</data>
   <data key="endline">18</data>
   <data key="startoffset">505</data>
   <data key="endoffset">516</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A522" target="sink">
   <data key="startline">18</data>
   <data key="endline">18</data>
   <data key="startoffset">505</data>
   <data key="endoffset">516</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A535"/>
  <edge source="A524" target="A535">
   <data key="startline">20</data>
   <data key="endline">20</data>
   <data key="startoffset">531</data>
   <data key="endoffset">554</data>
   <data key="enterFunction">__VERIFIER_assert</data>
  </edge>
  <edge source="A535" target="sink">
   <data key="startline">4</data>
   <data key="endline">4</data>
   <data key="startoffset">342</data>
   <data key="endoffset">345</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="A539"/>
  <edge source="A535" target="A539">
   <data key="startline">4</data>
   <data key="endline">4</data>
   <data key="startoffset">342</data>
   <data key="endoffset">345</data>
   <data key="control">condition-false</data>
   <data key="assumption">cond == (1);</data>
   <data key="assumption.scope">__VERIFIER_assert</data>
  </edge>
  <node id="A544"/>
  <edge source="A539" target="A544">
   <data key="startline">7</data>
   <data key="endline">7</data>
   <data key="startoffset">388</data>
   <data key="endoffset">394</data>
   <data key="returnFrom">__VERIFIER_assert</data>
  </edge>
  <node id="A547"/>
  <edge source="A544" target="A547">
   <data key="startline">21</data>
   <data key="endline">21</data>
   <data key="startoffset">562</data>
   <data key="endoffset">567</data>
   <data key="assumption">(*(p)) == (1);</data>
   <data key="assumption.scope">glob2</data>
  </edge>
  <node id="A683"/>
  <edge source="A547" target="A683">
   <data key="enterLoopHead">true</data>
   <data key="startline">18</data>
   <data key="endline">18</data>
   <data key="startoffset">519</data>
   <data key="endoffset">521</data>
  </edge>
  <node id="A685"/>
  <edge source="A683" target="A685">
   <data key="startline">18</data>
   <data key="endline">18</data>
   <data key="startoffset">505</data>
   <data key="endoffset">516</data>
   <data key="control">condition-true</data>
  </edge>
  <edge source="A683" target="sink">
   <data key="startline">18</data>
   <data key="endline">18</data>
   <data key="startoffset">505</data>
   <data key="endoffset">516</data>
   <data key="control">condition-false</data>
  </edge>
  <node id="A691"/>
  <edge source="A685" target="A691">
   <data key="startline">20</data>
   <data key="endline">20</data>
   <data key="startoffset">531</data>
   <data key="endoffset">554</data>
   <data key="enterFunction">__VERIFIER_assert</data>
  </edge>
  <node id="A695">
   <data key="violation">true</data>
   <data key="violatedProperty">__VERIFIER_error(); called in line 5</data>
  </node>
  <edge source="A691" target="A695">
   <data key="startline">4</data>
   <data key="endline">4</data>
   <data key="startoffset">342</data>
   <data key="endoffset">345</data>
   <data key="control">condition-true</data>
   <data key="assumption">cond == (0);</data>
   <data key="assumption.scope">__VERIFIER_assert</data>
  </edge>
  <edge source="A691" target="sink">
   <data key="startline">4</data>
   <data key="endline">4</data>
   <data key="startoffset">342</data>
   <data key="endoffset">345</data>
   <data key="control">condition-false</data>
  </edge>
 </graph>
</graphml>
