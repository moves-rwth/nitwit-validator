<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation">
  <default>false</default>
 </key>
 <key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
  <default>false</default>
 </key>
 <key attr.name="isSinkNode" attr.type="boolean" for="node" id="sink">
  <default>false</default>
 </key>
 <key attr.name="violatedProperty" attr.type="string" for="node" id="violatedProperty"/>
 <key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
 <key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
 <key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
 <key attr.name="specification" attr.type="string" for="graph" id="specification"/>
 <key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
 <key attr.name="producer" attr.type="string" for="graph" id="producer"/>
 <key attr.name="creationTime" attr.type="string" for="graph" id="creationtime"/>
 <key attr.name="startline" attr.type="int" for="edge" id="startline"/>
 <key attr.name="endline" attr.type="int" for="edge" id="endline"/>
 <key attr.name="startoffset" attr.type="int" for="edge" id="startoffset"/>
 <key attr.name="endoffset" attr.type="int" for="edge" id="endoffset"/>
 <key attr.name="originFileName" attr.type="string" for="edge" id="originfile">
  <default>./SV-COMP_cast_union_loose_.c</default>
 </key>
 <key attr.name="control" attr.type="string" for="edge" id="control"/>
 <key attr.name="assumption" attr.type="string" for="edge" id="assumption"/>
 <key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/>
 <key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
 <key attr.name="returnFromFunction" attr.type="string" for="edge" id="returnFrom"/>
 <key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
 <key attr.name="inputWitnessHash" attr.type="string" for="graph" id="inputwitnesshash"/>
 <graph edgedefault="directed">
  <data key="witness-type">violation_witness</data>
  <data key="sourcecodelang">C</data>
  <data key="producer">CPAchecker 1.8-svn a776d662f5+ / kInduction</data>
  <data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data>
  <data key="programfile">./SV-COMP_cast_union_loose_.c</data>
  <data key="programhash">d05f7206a09279a5c696a455c42513f3978193f9868f0577520b47712de1a5e1</data>
  <data key="architecture">32bit</data>
  <data key="creationtime">2019-06-07T10:02:34+02:00</data>
  <node id="A30">
   <data key="entry">true</data>
  </node>
  <node id="A60"/>
  <edge source="A30" target="A60">
   <data key="startline">25</data>
   <data key="endline">25</data>
   <data key="startoffset">621</data>
   <data key="endoffset">631</data>
   <data key="enterFunction">main</data>
  </edge>
  <node id="A72"/>
  <edge source="A60" target="A72">
   <data key="startline">30</data>
   <data key="endline">30</data>
   <data key="startoffset">658</data>
   <data key="endoffset">684</data>
   <data key="assumption">a == (0);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A82"/>
  <edge source="A72" target="A82">
   <data key="startline">31</data>
   <data key="endline">31</data>
   <data key="startoffset">707</data>
   <data key="endoffset">717</data>
   <data key="assumption">a == (0);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A86"/>
  <edge source="A82" target="A86">
   <data key="startline">31</data>
   <data key="endline">31</data>
   <data key="startoffset">722</data>
   <data key="endoffset">731</data>
   <data key="assumption">a == (0);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A106"/>
  <edge source="A86" target="A106">
   <data key="startline">33</data>
   <data key="endline">33</data>
   <data key="startoffset">742</data>
   <data key="endoffset">748</data>
   <data key="enterFunction">cast</data>
  </edge>
  <node id="A113"/>
  <edge source="A106" target="A113">
   <data key="startline">17</data>
   <data key="endline">17</data>
   <data key="startoffset">496</data>
   <data key="endoffset">504</data>
   <data key="assumption">i == (0);</data>
   <data key="assumption.scope">cast</data>
  </edge>
  <node id="A119"/>
  <edge source="A113" target="A119">
   <data key="startline">18</data>
   <data key="endline">18</data>
   <data key="startoffset">512</data>
   <data key="endoffset">530</data>
   <data key="assumption">((x.i)[0]) == (1127219200);</data>
   <data key="assumption.scope">cast</data>
  </edge>
  <node id="A123"/>
  <edge source="A119" target="A123">
   <data key="startline">19</data>
   <data key="endline">19</data>
   <data key="startoffset">535</data>
   <data key="endoffset">549</data>
   <data key="assumption">((y.i)[0]) == (1127219200);</data>
   <data key="assumption.scope">cast</data>
  </edge>
  <node id="A127"/>
  <edge source="A123" target="A127">
   <data key="startline">20</data>
   <data key="endline">20</data>
   <data key="startoffset">554</data>
   <data key="endoffset">572</data>
   <data key="assumption">((x.i)[1]) == (-2147483648);</data>
   <data key="assumption.scope">cast</data>
  </edge>
  <node id="A128"/>
  <edge source="A127" target="A128">
   <data key="startline">21</data>
   <data key="endline">21</data>
   <data key="startoffset">577</data>
   <data key="endoffset">595</data>
   <data key="assumption">((y.i)[1]) == (-2147483648);</data>
   <data key="assumption.scope">cast</data>
  </edge>
  <node id="A136"/>
  <edge source="A128" target="A136">
   <data key="startline">22</data>
   <data key="endline">22</data>
   <data key="startoffset">600</data>
   <data key="endoffset">615</data>
   <data key="returnFrom">cast</data>
  </edge>
  <node id="A139"/>
  <edge source="A136" target="A139">
   <data key="startline">34</data>
   <data key="endline">34</data>
   <data key="startoffset">771</data>
   <data key="endoffset">782</data>
   <data key="control">condition-true</data>
   <data key="assumption">r == (6.749248551124438E+299);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="sink">
   <data key="sink">true</data>
  </node>
  <edge source="A136" target="sink">
   <data key="startline">34</data>
   <data key="endline">34</data>
   <data key="startoffset">771</data>
   <data key="endoffset">782</data>
   <data key="control">condition-false</data>
  </edge>
  <edge source="A139" target="sink">
   <data key="startline">34</data>
   <data key="endline">34</data>
   <data key="startoffset">787</data>
   <data key="endoffset">797</data>
   <data key="control">condition-true</data>
  </edge>
  <node id="A143"/>
  <edge source="A139" target="A143">
   <data key="startline">34</data>
   <data key="endline">34</data>
   <data key="startoffset">787</data>
   <data key="endoffset">797</data>
   <data key="control">condition-false</data>
   <data key="assumption">r == (6.749248551124438E+299);</data>
   <data key="assumption.scope">main</data>
  </edge>
  <node id="A147"/>
  <edge source="A143" target="A147">
   <data key="startline">34</data>
   <data key="endline">34</data>
   <data key="startoffset">753</data>
   <data key="endoffset">797</data>
   <data key="enterFunction">__VERIFIER_assert</data>
  </edge>
  <node id="A158">
   <data key="violation">true</data>
   <data key="violatedProperty">__VERIFIER_error(); called in line 8</data>
  </node>
  <edge source="A147" target="A158">
   <data key="startline">8</data>
   <data key="endline">8</data>
   <data key="startoffset">386</data>
   <data key="endoffset">389</data>
   <data key="control">condition-true</data>
   <data key="assumption">cond == (0);</data>
   <data key="assumption.scope">__VERIFIER_assert</data>
  </edge>
  <edge source="A147" target="sink">
   <data key="startline">8</data>
   <data key="endline">8</data>
   <data key="startoffset">386</data>
   <data key="endoffset">389</data>
   <data key="control">condition-false</data>
  </edge>
 </graph>
</graphml>
